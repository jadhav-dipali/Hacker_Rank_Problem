/*dLargest has the following parameters:

string s: a string
int k: the length of the substrings to find
Returns

string: the string ' + "\n" + ' where and are the two substrings
Input Format

The first line contains a string denoting .
The second line contains an integer denoting .

Constraints

 consists of English alphabetic letters only (i.e., [a-zA-Z]).
Sample Input 0

welcometojava
3
Sample Output 0

ava
wel
Explanation 0

String  has the following lexicographically-ordered substrings of length :

We then return the first (lexicographically smallest) substring and the last (lexicographically largest) substring as two newline-separated values (i.e., ava\nwel).

The stub code in the editor then prints ava as our first line of output and wel as our second line of output.

Language
Java 8

More
1456789101112131415161718
import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k)
     {
        int n = s.length();
    String smallest = s.substring(0,k);
    String largest =s.substring(0,k);
    for(int i = 0;i<n-k+1;i++){
        String temp = s.substring(i,i+k);
        largest = largest.compareTo(temp)>0 ?largest:temp;

Line: 4 Col: 1

Submit Code

Run Code

Upload Code as File

Test against custom input*/


import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k)
     {
        int n = s.length();
    String smallest = s.substring(0,k);
    String largest =s.substring(0,k);
    for(int i = 0;i<n-k+1;i++){
        String temp = s.substring(i,i+k);
        largest = largest.compareTo(temp)>0 ?largest:temp;
        smallest = smallest.compareTo(temp)<0?smallest:temp;
    }
            return smallest + "\n" + largest;
    }


    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}
